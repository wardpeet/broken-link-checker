{"version":3,"file":"transitiveAuth.js","names":["_isurl","_interopRequireDefault","require","e","__esModule","default","DEFAULT_AUTH","Object","freeze","password","username","_default","url","auth","isURL","TypeError","URL","exports","module"],"sources":["../../../lib/internal/http-protocol/transitiveAuth.js"],"sourcesContent":["import isURL from \"isurl\";\n\n\n\nconst DEFAULT_AUTH = Object.freeze({ password:\"\", username:\"\" });\n\n\n\n/**\n * Possibly override `auth` with that from `url`.\n * @param {URL} url\n * @param {object} [auth]\n * @returns {object}\n */\nexport default (url, auth=DEFAULT_AUTH) =>\n{\n\tif (!isURL(url))\n\t{\n\t\tthrow new TypeError(\"Invalid URL\");\n\t}\n\telse if (url.username!==\"\" || url.password!==\"\")\n\t{\n\t\t// Clone to avoid mutation\n\t\turl = new URL(url);\n\n\t\tauth =\n\t\t{\n\t\t\tpassword: url.password,\n\t\t\tusername: url.username\n\t\t};\n\n\t\t// @todo is this the kind of result we want, with auth stored in `http` ?\n\t\turl.password = \"\";\n\t\turl.username = \"\";\n\t}\n\n\treturn { auth, url };\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA0B,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAI1B,MAAMG,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC;EAAEC,QAAQ,EAAC,EAAE;EAAEC,QAAQ,EAAC;AAAG,CAAC,CAAC;;AAIhE;AACA;AACA;AACA;AACA;AACA;AALA,IAAAC,QAAA,GAMeA,CAACC,GAAG,EAAEC,IAAI,GAACP,YAAY,KACtC;EACC,IAAI,CAAC,IAAAQ,cAAK,EAACF,GAAG,CAAC,EACf;IACC,MAAM,IAAIG,SAAS,CAAC,aAAa,CAAC;EACnC,CAAC,MACI,IAAIH,GAAG,CAACF,QAAQ,KAAG,EAAE,IAAIE,GAAG,CAACH,QAAQ,KAAG,EAAE,EAC/C;IACC;IACAG,GAAG,GAAG,IAAII,GAAG,CAACJ,GAAG,CAAC;IAElBC,IAAI,GACJ;MACCJ,QAAQ,EAAEG,GAAG,CAACH,QAAQ;MACtBC,QAAQ,EAAEE,GAAG,CAACF;IACf,CAAC;;IAED;IACAE,GAAG,CAACH,QAAQ,GAAG,EAAE;IACjBG,GAAG,CAACF,QAAQ,GAAG,EAAE;EAClB;EAEA,OAAO;IAAEG,IAAI;IAAED;EAAI,CAAC;AACrB,CAAC;AAAAK,OAAA,CAAAZ,OAAA,GAAAM,QAAA;AAAAO,MAAA,CAAAD,OAAA,GAAAA,OAAA,CAAAZ,OAAA","ignoreList":[]}