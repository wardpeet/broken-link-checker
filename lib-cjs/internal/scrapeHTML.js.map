{"version":3,"file":"scrapeHTML.js","names":["_condenseWhitespace","_interopRequireDefault","require","_Link","_interopRequireWildcard","_httpEquivRefresh","_parseSrcset","_robotDirectives","_tags","_walkParse","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","MAX_FILTER_LEVEL","TAGS","length","ALL_NODE_ATTRS","SPECIAL_NODE_NAME_PREFIX","BASE_NODE_NAME","BODY_NODE_NAME","COMMENT_NODE_NAME","DOCUMENT_NODE_NAME","HEAD_NODE_NAME","HTML_NODE_NAME","META_NODE_NAME","TEXT_NODE_NAME","CONTENT_ATTR_NAME","HREF_ATTR_NAME","HTTP_EQUIV_ATTR_NAME","NAME_ATTR_NAME","PING_ATTR_NAME","SRCSET_ATTR_NAME","REFRESH_ATTR_VALUE","ROBOTS_ATTR_VALUE","findLinks","rootNode","callback","walk","node","nodeName","filteredNodeAttrs","attrs","forEach","name","attrName","value","attrValue","url","_node$attrMap$HTTP_EQ","attrMap","toLowerCase","parseMetaRefresh","split","filter","pingURL","parseSrcset","map","image","trim","Array","isArray","_url","findPreliminaries","robots","result","base","RobotDirectives","isBot","meta","findRootNode","document","childNodes","find","childNode","getNthIndex","parentsChildren","parentNode","count","every","child","startsWith","getSelector","selector","push","reverse","join","getText","text","condenseWhitespace","stringifyNode","attrsString","reduce","_default","pageURL","links","_node$sourceCodeLocat","location","sourceCodeLocation","link","Link","HTML_ATTR_NAME","HTML_ATTRS","HTML_BASE_HREF","HTML_INDEX","HTML_LOCATION","HTML_SELECTOR","HTML_TAG","HTML_TAG_NAME","HTML_TEXT","resolve","exports","module"],"sources":["../../lib/internal/scrapeHTML.js"],"sourcesContent":["import condenseWhitespace from \"condense-whitespace\";\nimport Link, {HTML_ATTR_NAME, HTML_ATTRS, HTML_BASE_HREF, HTML_INDEX, HTML_LOCATION, HTML_SELECTOR, HTML_TAG, HTML_TAG_NAME, HTML_TEXT} from \"./Link\";\nimport parseMetaRefresh from \"http-equiv-refresh\";\nimport parseSrcset from \"parse-srcset\";\nimport RobotDirectives from \"robot-directives\";\nimport TAGS from \"./tags\";\nimport walk from \"walk-parse5\";\n\n\n\nconst MAX_FILTER_LEVEL = TAGS[TAGS.length - 1];\nconst ALL_NODE_ATTRS = MAX_FILTER_LEVEL[\"*\"];\n\nconst SPECIAL_NODE_NAME_PREFIX = \"#\";\n\nconst BASE_NODE_NAME = \"base\";\nconst BODY_NODE_NAME = \"body\";\nconst COMMENT_NODE_NAME = `${SPECIAL_NODE_NAME_PREFIX}comment`;\nconst DOCUMENT_NODE_NAME = `${SPECIAL_NODE_NAME_PREFIX}document`;\nconst HEAD_NODE_NAME = \"head\";\nconst HTML_NODE_NAME = \"html\";\nconst META_NODE_NAME = \"meta\";\nconst TEXT_NODE_NAME = `${SPECIAL_NODE_NAME_PREFIX}text`;\n\nconst CONTENT_ATTR_NAME = \"content\";\nconst HREF_ATTR_NAME = \"href\";\nconst HTTP_EQUIV_ATTR_NAME = \"http-equiv\";\nconst NAME_ATTR_NAME = \"name\";\nconst PING_ATTR_NAME = \"ping\";\nconst SRCSET_ATTR_NAME = \"srcset\";\n\nconst REFRESH_ATTR_VALUE = \"refresh\";\nconst ROBOTS_ATTR_VALUE = \"robots\";\n\n\n\n/**\n * Traverse the root node (synchronously) and return located links via a callback function.\n * @param {object} rootNode\n * @param {Function} callback\n */\nconst findLinks = (rootNode, callback) =>\n{\n\twalk(rootNode, node =>\n\t{\n\t\tif (node.nodeName!==COMMENT_NODE_NAME && node.nodeName!==TEXT_NODE_NAME)\n\t\t{\n\t\t\tconst filteredNodeAttrs = MAX_FILTER_LEVEL[node.nodeName] ?? {};\n\n\t\t\tnode.attrs.forEach(({name:attrName, value:attrValue}) =>\n\t\t\t{\n\t\t\t\tlet url = null;\n\n\t\t\t\t// If a supported attribute\n\t\t\t\tif (attrName in filteredNodeAttrs || attrName in ALL_NODE_ATTRS)\n\t\t\t\t{\n\t\t\t\t\tswitch (attrName)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase CONTENT_ATTR_NAME:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Special case for `<meta http-equiv=\"refresh\" content>`\n\t\t\t\t\t\t\t// No browser supports a value surrounded by spaces, so `trim()` is not used\n\t\t\t\t\t\t\tif (node.attrMap[HTTP_EQUIV_ATTR_NAME]?.toLowerCase() === REFRESH_ATTR_VALUE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\turl = parseMetaRefresh(attrValue).url;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase PING_ATTR_NAME:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl = attrValue.split(\" \").filter(pingURL => pingURL !== \"\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase SRCSET_ATTR_NAME:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl = parseSrcset(attrValue).map(image => image.url);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-url-potentially-surrounded-by-spaces\n\t\t\t\t\t\t\turl = attrValue.trim();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(url))\n\t\t\t\t\t{\n\t\t\t\t\t\turl.forEach(_url => callback(node, attrName, _url));\n\t\t\t\t\t}\n\t\t\t\t\telse if (url != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcallback(node, attrName, url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\n\n\n/**\n * Traverse the root node to locate preliminary elements/data.\n *\n * <base href>\n *\n * \tLooks for the first instance. If no `href` attribute exists,\n * \tthe element is ignored and possible successors are considered.\n *\n * <meta name content>\n *\n * \tLooks for all robot instances and cascades the values.\n *\n * @param {object} rootNode\n * @param {RobotDirectives} robots\n * @returns {object}\n */\nconst findPreliminaries = (rootNode, robots) =>\n{\n\tconst result = { base:null };\n\n\twalk(rootNode, ({attrMap, nodeName}) =>\n\t{\n\t\tswitch (nodeName)\n\t\t{\n\t\t\t// `<base>` can be anywhere, not just within `<head>`\n\t\t\tcase BASE_NODE_NAME:\n\t\t\t{\n\t\t\t\tif (result.base===null && HREF_ATTR_NAME in attrMap)\n\t\t\t\t{\n\t\t\t\t\t// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-url-potentially-surrounded-by-spaces\n\t\t\t\t\tresult.base = attrMap[HREF_ATTR_NAME].trim();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// `<meta>` can be anywhere\n\t\t\tcase META_NODE_NAME:\n\t\t\t{\n\t\t\t\tif (robots && NAME_ATTR_NAME in attrMap && CONTENT_ATTR_NAME in attrMap)\n\t\t\t\t{\n\t\t\t\t\tconst name = attrMap[NAME_ATTR_NAME].trim().toLowerCase();\n\n\t\t\t\t\tif (name===ROBOTS_ATTR_VALUE || RobotDirectives.isBot(name))\n\t\t\t\t\t{\n\t\t\t\t\t\trobots.meta(name, attrMap[CONTENT_ATTR_NAME]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (result.base!==null && !robots)\n\t\t{\n\t\t\t// Kill walk\n\t\t\treturn false;\n\t\t}\n\t});\n\n\treturn result;\n};\n\n\n\n/**\n * Find the `<html>` element.\n * @param {object} document\n * @returns {object}\n */\nconst findRootNode = document => document.childNodes.find(childNode =>\n{\n\t// Doctypes have no `childNodes` property\n\t// HTML can only have one true root node\n\tif (childNode.childNodes != null)\n\t{\n\t\treturn childNode;\n\t}\n});\n\n\n\n/**\n * Find a node's `:nth-child()` index among its siblings.\n * @param {object} node\n * @returns {number}\n */\nconst getNthIndex = node =>\n{\n\tconst parentsChildren = node.parentNode.childNodes;\n\tlet count = 0;\n\n\tparentsChildren.every(child =>\n\t{\n\t\tif (child !== node)\n\t\t{\n\t\t\t// Exclude non-element nodes\n\t\t\tif (!child.nodeName.startsWith(SPECIAL_NODE_NAME_PREFIX))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t});\n\n\t// `:nth-child()` indices don't start at 0\n\treturn count + 1;\n};\n\n\n\n/**\n * Produces a CSS selector that matches an element.\n * @param {object} node\n * @returns {string}\n */\nconst getSelector = node =>\n{\n\tconst selector = [];\n\n\twhile (node.nodeName !== DOCUMENT_NODE_NAME)\n\t{\n\t\tlet name = node.nodeName;\n\n\t\t// Only one of these are ever allowed per document -- so, index is unnecessary\n\t\tif (name!==HTML_NODE_NAME && name!==BODY_NODE_NAME & name!==HEAD_NODE_NAME)\n\t\t{\n\t\t\tname += `:nth-child(${getNthIndex(node)})`;\n\t\t}\n\n\t\t// Building backwards\n\t\tselector.push(name);\n\n\t\tnode = node.parentNode;\n\t}\n\n\treturn selector.reverse().join(\" > \");\n};\n\n\n\n/**\n * Produces an `innerText` value for text nodes within an element.\n * @param {object} node\n * @returns {string|null}\n */\nconst getText = node =>\n{\n\tlet text = null;\n\n\tif (node.childNodes.length > 0)\n\t{\n\t\ttext = \"\";\n\n\t\twalk(node, ({nodeName, value}) =>\n\t\t{\n\t\t\tif (nodeName === TEXT_NODE_NAME)\n\t\t\t{\n\t\t\t\ttext += value;\n\t\t\t}\n\t\t});\n\n\t\t// @todo don't normalize if within <pre> ? use \"normalize-html-whitespace\" package if so\n\t\ttext = condenseWhitespace(text);\n\t}\n\n\treturn text;\n};\n\n\n\n/**\n * Serialize an HTML element into a string.\n * @param {object} node\n * @returns {string}\n */\nconst stringifyNode = ({attrs, nodeName}) =>\n{\n\tconst attrsString = attrs.reduce((result, {name, value}) => `${result} ${name}=\"${value}\"`, \"\");\n\n\treturn `<${nodeName}${attrsString}>`;\n};\n\n\n\n/**\n * Scrape a parsed HTML document/tree for links.\n * @param {object} document\n * @param {URL|string} pageURL\n * @param {RobotDirectives} robots\n * @returns {Array<Link>}\n */\nexport default (document, pageURL, robots) =>\n{\n\tconst links = [];\n\tconst rootNode = findRootNode(document);\n\tconst {base} = findPreliminaries(rootNode, robots);\n\n\tfindLinks(rootNode, (node, attrName, url) =>\n\t{\n\t\t// Elements added for compliance (not from HTML source) have no location\n\t\tconst location = node.sourceCodeLocation?.attrs[attrName] ?? null;\n\n\t\tconst link = new Link()\n\t\t.set(HTML_ATTR_NAME, attrName)\n\t\t.set(HTML_ATTRS, node.attrMap)\n\t\t.set(HTML_BASE_HREF, base)\n\t\t.set(HTML_INDEX, links.length)\n\t\t.set(HTML_LOCATION, location)\n\t\t.set(HTML_SELECTOR, getSelector(node))\n\t\t.set(HTML_TAG, stringifyNode(node))\n\t\t.set(HTML_TAG_NAME, node.nodeName)\n\t\t.set(HTML_TEXT, getText(node))\n\t\t.resolve(url, pageURL);\n\n\t\tlinks.push(link);\n\t});\n\n\treturn links;\n};\n"],"mappings":"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","ignoreList":[]}