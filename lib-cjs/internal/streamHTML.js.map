{"version":3,"file":"streamHTML.js","names":["_reasons","require","_httpProtocol","_isurl","_interopRequireDefault","e","__esModule","default","_default","url","auth","cache","options","isURL","TypeError","BLC_INVALID","streamHTMLFromHTTP","exports","module"],"sources":["../../lib/internal/streamHTML.js"],"sourcesContent":["import {BLC_INVALID} from \"./reasons\";\n//import {isCompatibleScheme as isFileScheme, streamHTML as streamHTMLFromFile} from \"./file-protocol\";\nimport {/*isCompatibleScheme as isHTTPScheme, */streamHTML as streamHTMLFromHTTP} from \"./http-protocol\";\nimport isURL from \"isurl\";\n\n\n\n/**\n * Retreive HTML contents from a URL.\n * @param {URL} url\n * @param {object} auth\n * @param {URLCache} cache\n * @param {object} options\n * @throws {ExpectedHTMLError} if not HTML media type\n * @throws {HTMLRetrievalError} 404, etc\n * @throws {TypeError} non-URL\n * @returns {Promise<object>}\n */\nexport default async (url, auth, cache, options) =>\n{\n\tif (!isURL(url))\n\t{\n\t\tthrow new TypeError(BLC_INVALID);\n\t}\n\telse\n\t{\n\t\t/*if (isFileScheme(url))\n\t\t{\n\t\t\tconst stream = await streamHTMLFromFile(url);\n\t\t\treturn {stream};\n\t\t}\n\t\telse if (isHTTPScheme(url))\n\t\t{*/\n\t\t\treturn streamHTMLFromHTTP(url, auth, cache, options);\n\t\t//}\n\t}\n};\n"],"mappings":";;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAC,sBAAA,CAAAH,OAAA;AAA0B,SAAAG,uBAAAC,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAF1B;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,IAAAG,QAAA,GAWe,MAAAA,CAAOC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,KAC/C;EACC,IAAI,CAAC,IAAAC,cAAK,EAACJ,GAAG,CAAC,EACf;IACC,MAAM,IAAIK,SAAS,CAACC,oBAAW,CAAC;EACjC,CAAC,MAED;IACC;AACF;AACA;AACA;AACA;AACA;AACA;IACG,OAAO,IAAAC,wBAAkB,EAACP,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,CAAC;IACrD;EACD;AACD,CAAC;AAAAK,OAAA,CAAAV,OAAA,GAAAC,QAAA;AAAAU,MAAA,CAAAD,OAAA,GAAAA,OAAA,CAAAV,OAAA","ignoreList":[]}